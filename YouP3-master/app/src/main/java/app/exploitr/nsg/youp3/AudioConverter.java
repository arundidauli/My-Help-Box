package app.exploitr.nsg.youp3;

import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.obsez.android.lib.filechooser.ChooserDialog;

import java.io.File;

import cafe.adriel.androidaudioconverter.AndroidAudioConverter;
import cafe.adriel.androidaudioconverter.callback.ILoadCallback;
import converter.utils.ConverterService;
import utils.DataStore;

public class AudioConverter extends AppCompatActivity {
	
	public static final String INPUT_ = "input";
	public static final String OUTPUT_ = "output";
	public static final String ID_ = "id";
	public static boolean isConversionRunning = false;
	AlertDialog alertDialog;
	RadioGroup radioGroup;
	EditText input, output;
	ImageButton inputAddr, outputAddr;
	FloatingActionButton go_convert;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_audio_converter);
		
		alertDialog = dialog();
		
		radioGroup = findViewById(R.id.r_group);
		input = findViewById(R.id.inputAddr);
		output = findViewById(R.id.outputAddr);
		inputAddr = findViewById(R.id.inputAddrEditor);
		outputAddr = findViewById(R.id.outputAddrEditor);
		go_convert = findViewById(R.id.conv_go);
		
		radioGroup.check(R.id.mp3);
		radioGroup.setOnCheckedChangeListener((group, checkedId) -> Toast.makeText(this, ((RadioButton) findViewById(checkedId)).getText(), Toast.LENGTH_SHORT).show());
		
		if (getSupportActionBar() != null) {
			getSupportActionBar().setTitle("Audio Converter (Beta)");
		}
		
		new Handler(Looper.getMainLooper()).postDelayed(() -> {
			if (!YouWorker.IS_CONVERSION_SUPPORTED && !AudioConverter.this.isFinishing()) {
				alertDialog.show();
				checkSupportForConversion();
			}
		}, 300);
		
		
		inputAddr.setOnClickListener(v -> new ChooserDialog(AudioConverter.this)
				.withStartFile(DataStore.getInstance(getBaseContext()).getPathDownload())
				.withChosenListener((path, pathFile) -> input.setText(path))
				.withOnCancelListener(dialog -> {
					Toast.makeText(this, "Nothing Selected :-(", Toast.LENGTH_SHORT).show();
					dialog.cancel(); // MUST have
				})
				.build()
				.show());
		
		outputAddr.setOnClickListener(v -> new ChooserDialog(AudioConverter.this)
				.withFilter(true, false)
				.withStartFile(DataStore.getInstance(getBaseContext()).getPathDownload())
				.withChosenListener((path, pathFile) -> output.setText(path))
				.build()
				.show());
		
		go_convert.setOnClickListener(v -> {
			if (YouWorker.IS_CONVERSION_SUPPORTED) {
				if (!isConversionRunning) {
					if (new File(input.getText().toString()).exists() && new File(input.getText().toString()).canRead()) {
						if (new File(output.getText().toString()).canWrite()) {
							Intent con_Int = new Intent(AudioConverter.this, ConverterService.class)
									.putExtra(INPUT_, input.getText().toString())
									.putExtra(OUTPUT_, output.getText().toString())
									.putExtra(ID_, radioGroup.getCheckedRadioButtonId());
							AudioConverter.isConversionRunning = true;
							if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
								startForegroundService(con_Int);
							} else {
								startService(con_Int);
							}
						} else {
							Toast.makeText(this, "Can't Write Output Directory", Toast.LENGTH_SHORT).show();
						}
					} else {
						Toast.makeText(this, "Invalid input file", Toast.LENGTH_SHORT).show();
					}
				} else {
					Toast.makeText(this, "Pending Conversion.. Wait For Finish", Toast.LENGTH_SHORT).show();
				}
			} else {
				Toast.makeText(this, "Conversion not supported on this device", Toast.LENGTH_SHORT).show();
			}
		});
	}
	
	
	private void checkSupportForConversion() {
		AndroidAudioConverter.load(this, new ILoadCallback() {
			@Override
			public void onSuccess() {
				if (alertDialog.isShowing())
					alertDialog.dismiss();
				YouWorker.IS_CONVERSION_SUPPORTED = true;
			}
			
			@Override
			public void onFailure(Exception error) {
				if (alertDialog.isShowing())
					alertDialog.dismiss();
				YouWorker.IS_CONVERSION_SUPPORTED = false;
				AlertDialog localDialog = new AlertDialog.Builder(AudioConverter.this)
						.setTitle("Error")
						.setMessage("This device currently doesn't support Audio Conversion.")
						.setCancelable(false)
						.setPositiveButton("Ok", (dialog, which) -> finish())
						.create();
				if (!AudioConverter.this.isFinishing()) {
					localDialog.show();
				}
			}
		});
	}
	
	private AlertDialog dialog() {
		return new AlertDialog.Builder(this)
				.setView(R.layout.dialog_progress)
				.setCancelable(false)
				.create();
	}
	
}
