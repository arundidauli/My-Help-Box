package app.exploitr.nsg.youp3;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.ImageButton;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.SwitchCompat;

import com.llollox.androidtoggleswitch.widgets.ToggleSwitch;
import com.obsez.android.lib.filechooser.ChooserDialog;

import org.greenrobot.eventbus.EventBus;

import java.io.File;
import java.util.Objects;

import utils.DataStore;
import utils.IPC;

public class SettingsActivity extends AppCompatActivity {
	
	private static boolean edited = false;
	SwitchCompat screenFull, remBar, deskTop;
	ToggleSwitch basicAdv;
	AppCompatEditText destination;
	ImageButton browse_file;
	TextView wrongText;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_settings);
		
		Objects.requireNonNull(getSupportActionBar()).setTitle("Settings");
		
		screenFull = findViewById(R.id.fullScr);
		remBar = findViewById(R.id.remBar);
		deskTop = findViewById(R.id.deskMode);
		basicAdv = findViewById(R.id.basicAdv);
		destination = findViewById(R.id.destin);
		browse_file = findViewById(R.id.browse_directory);
		wrongText = findViewById(R.id.wrongText);
		
		screenFull.setChecked(DataStore.getInstance(getBaseContext()).isFullScreen());
		remBar.setChecked(DataStore.getInstance(getBaseContext()).isRemoveToolbar());
		deskTop.setChecked(DataStore.getInstance(getBaseContext()).isDeskModeEnabled());
		basicAdv.setCheckedPosition(DataStore.getInstance(getBaseContext()).isAdvancedDownloadMode() ? 1 : 0); //1 adv 0 basic
		
		screenFull.setOnCheckedChangeListener((buttonView, isChecked) -> {
			EventBus.getDefault().post(new IPC().setMessage(MainActivity.broadCastIntentFullScreen));
			DataStore.getInstance(getBaseContext()).setFullScreen(isChecked);
			finish();
		});
		
		deskTop.setOnCheckedChangeListener((buttonView, isChecked) -> {
			EventBus.getDefault().post(new IPC().setMessage(MainActivity.broadCastIntent));
			DataStore.getInstance(getBaseContext()).setDeskModeEnabled(isChecked);
			finish();
		});
		
		remBar.setOnCheckedChangeListener((buttonView, isChecked) -> {
			EventBus.getDefault().post(new IPC().setMessage(MainActivity.broadCastIntentToolbar));
			DataStore.getInstance(getBaseContext()).setRemoveToolbar(isChecked);
			finish();
		});
		
		basicAdv.setOnChangeListener(position -> {
			Toast.makeText(getApplicationContext(), position == 0 ? "Basic Mode" : "Advanced Mode", Toast.LENGTH_SHORT).show();
			DataStore.getInstance(getBaseContext()).setAdvancedDownloadMode(position == 1);
		});
		
		findViewById(R.id.report).setOnClickListener(v -> {
			Intent x = new Intent(Intent.ACTION_VIEW, Uri.parse("https://github.com/ExploiTR/YouP3/issues"));
			x.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
			startActivity(x);
		});
		
		findViewById(R.id.okay).setOnClickListener(v -> {
			if (checkFile(Objects.requireNonNull(destination.getText()).toString())) {
				DataStore.getInstance(getBaseContext()).setPathDownload(destination.getText().toString());
				if (edited) {
					Toast.makeText(this, "Changed Download Directory to : " + destination.getText().toString()
							, Toast.LENGTH_SHORT).show();
				}
				finish();
			} else {
				Toast.makeText(this, "Download Directory Selected Is Invalid", Toast.LENGTH_SHORT).show();
			}
		});
		
		
		destination.setText(DataStore.getInstance(getBaseContext()).getPathDownload());
		destination.addTextChangedListener(new TextWatcher() {
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {
			
			}
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count) {
			
			}
			
			@Override
			public void afterTextChanged(Editable s) {
				edited = true;
				checkFile(s.toString());
			}
		});
		checkFile(Objects.requireNonNull(destination.getText()).toString());
		
		browse_file.setOnClickListener(v -> new ChooserDialog(SettingsActivity.this)
				.withStartFile(DataStore.getInstance(getBaseContext()).getPathDownload())
				.withChosenListener((path, pathFile) -> destination.setText(path))
				.withOnCancelListener(dialog -> {
					Toast.makeText(this, "Nothing Selected :-(", Toast.LENGTH_SHORT).show();
					dialog.cancel(); // MUST have
				})
				.build()
				.show());
	}
	
	private boolean checkFile(String text) {
		File newFile = new File(text);
		if (newFile.exists() && newFile.canWrite() && newFile.canRead() && newFile.canExecute()) {
			wrongText.setVisibility(View.GONE);
			return true;
		} else {
			wrongText.setVisibility(View.VISIBLE);
			return false;
		}
	}
	
}
