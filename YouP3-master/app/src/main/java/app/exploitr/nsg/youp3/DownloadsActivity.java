package app.exploitr.nsg.youp3;


import android.annotation.SuppressLint;
import android.content.Intent;
import android.content.res.Configuration;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.SwitchCompat;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.snackbar.Snackbar;

import org.apache.commons.io.FilenameUtils;
import org.greenrobot.eventbus.EventBus;
import org.greenrobot.eventbus.Subscribe;
import org.greenrobot.eventbus.ThreadMode;

import java.io.File;
import java.util.ArrayList;

import downloads.DownloadHistoryManager;
import downloads.DownloadsAdapter;
import downloads.RealmController;
import downloads.VideoInfo;
import utils.Helper;
import utils.IPC;

@SuppressLint("InflateParams")
public class DownloadsActivity extends AppCompatActivity {
	
	public static final String DOWNLOAD_STARTED_COMPLETED = "_st_cd";
	private static boolean isRunning = false;
	private Handler mHandler;
	private Runnable mHandlerTask;
	private DownloadsAdapter adapter;
	private Configuration configuration;
	private RecyclerView recyclerView;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_downloads);
		
		mHandler = new Handler();
		
		configuration = new Configuration();
		configuration.orientation = getResources().getConfiguration().orientation;
		
		if (getSupportActionBar() != null) {
			getSupportActionBar().setTitle("Downloads (" + new DownloadHistoryManager().getTotalInfoCount() + ")");
		}
		
		recyclerView = findViewById(R.id.downloadedItems);
		
		if (new DownloadHistoryManager().getTotalInfoCount() == 0) {
			recyclerView.setVisibility(View.GONE);
			findViewById(R.id.noDownloadsText).setVisibility(View.VISIBLE);
		} else {
			recyclerView.setVisibility(View.VISIBLE);
			findViewById(R.id.noDownloadsText).setVisibility(View.GONE);
		}
		
		recyclerView.setLayoutManager(new LinearLayoutManager(DownloadsActivity.this));
		
		adapter = new DownloadsAdapter(this, getInfoInArrayList());
		
		adapter.setClickListener(new DownloadsAdapter.ItemClickListener() {
			@Override
			public void onCancelClick(final int id, int position, String name, final String path) {
				View topZa = getLayoutInflater().inflate(R.layout.downloads_opt_layout, null);
				((TextView) (topZa.findViewById(R.id._file_del_name))).setText("Delete Entry For " + FilenameUtils.getBaseName(path) + " ?");
				SwitchCompat compat = topZa.findViewById(R.id.prompt_del_file);
				new AlertDialog.Builder(DownloadsActivity.this)
						.setView(topZa)
						.setPositiveButton("Okay", (dialog, which) -> {
							if (compat.isChecked()) {
								if (new File(path).canWrite() && new RealmController().getVideoInfo(id).isCompleted()) {
									if (new File(path).delete()) {
										new DownloadHistoryManager().removeInfoById(id);
										adapter.notifyItemRemoved(position);
										adapter.notifyDataSetChangedCustom(getInfoInArrayList());
									} else {
										Snackbar.make(getWindow().getDecorView(),
												"Can't delete, can't access file",
												Snackbar.LENGTH_INDEFINITE)
												.setAction("Remove Entry", v -> {
													new DownloadHistoryManager().removeInfoById(id);
													adapter.notifyItemRemoved(position);
													adapter.notifyDataSetChangedCustom(getInfoInArrayList());
												}).show();
									}
								} else {
									Snackbar.make(getWindow().getDecorView(),
											"Can't delete, maybe previously deleted!",
											Snackbar.LENGTH_INDEFINITE)
											.setAction("Remove Entry", v -> {
												new DownloadHistoryManager().removeInfoById(id);
												adapter.notifyItemRemoved(position);
												adapter.notifyDataSetChangedCustom(getInfoInArrayList());
											})
											.setActionTextColor(ContextCompat.getColor(getBaseContext(),
													android.R.color.holo_blue_bright))
											.show();
								}
							} else {
								new DownloadHistoryManager().removeInfoById(id);
								adapter.notifyItemRemoved(position);
								adapter.notifyDataSetChangedCustom(getInfoInArrayList());
							}
						}).show();
			}
			
			@Override
			public void onOpenClick(final int id, int position, String path) {
				Helper.verb(id + "/" + path);
				File xyz = new File(path);
				if (xyz.exists()) {
					Intent superPlayer = new Intent(DownloadsActivity.this, MediaPlayer.class)
							.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK)
							.setData(Uri.fromFile(xyz));
					startActivity(superPlayer);
				} else {
					Snackbar.make(getWindow().getDecorView(), "File doesn't exists!", Snackbar.LENGTH_LONG)
							.setAction("Remove", v -> {
								new DownloadHistoryManager().removeInfoById(id);
								adapter.notifyItemRemoved(position);
								adapter.notifyDataSetChangedCustom(getInfoInArrayList());
							}).show();
				}
			}
			
			@Override
			public void onReDownloadClick(int id, String ytUrl) {
				Intent criticism = new Intent(DownloadsActivity.this, MainActivity.class)
						.setAction(MainActivity.reDownloadAction)
						.setData(Uri.parse(ytUrl));
				startActivity(criticism);
				DownloadsActivity.this.finish();
			}
		});
		
		adapter.setLongClickListener(new DownloadsAdapter.ItemLongClickListener() {
			@Override
			public void onOpenClick() {
				new AlertDialog.Builder(DownloadsActivity.this)
						.setTitle("Open File")
						.setMessage("\nClicking button will open the file\n")
						.show();
			}
			
			@Override
			public void onReDownloadClick() {
				new AlertDialog.Builder(DownloadsActivity.this)
						.setTitle("Open Youtube Page")
						.setMessage("\nOpens youtube page from where the download was captured\n")
						.show();
			}
			
			@Override
			public void onCancelClick() {
				new AlertDialog.Builder(DownloadsActivity.this)
						.setTitle("Delete File/Cancel Download")
						.setMessage("\nClicking button will delete this file from disk!!\n")
						.show();
			}
		});
		
		recyclerView.setAdapter(adapter);
		adapter.notifyDataSetChangedCustom(getInfoInArrayList());
		
		mHandlerTask = () -> {
			if (getSupportActionBar() != null)
				getSupportActionBar().setTitle("Downloads (" + new DownloadHistoryManager().getTotalInfoCount() + ")");
			mHandler.postDelayed(mHandlerTask, 200); // decreasing anymore will make ui laggy
		};
		mHandlerTask.run();
		
	}
	
	@Override
	protected void onDestroy() {
		mHandler.removeCallbacks(mHandlerTask);
		super.onDestroy();
	}
	
	private ArrayList<VideoInfo> getInfoInArrayList() {
		return new ArrayList<>(new RealmController().getVideoInfos());
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		getMenuInflater().inflate(R.menu.clear_one, menu);
		return super.onCreateOptionsMenu(menu);
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		new AlertDialog.Builder(DownloadsActivity.this)
				.setTitle("Check!")
				.setMessage("Are you sure to clear all downloads? It will also remove current downloads.")
				.setPositiveButton("Ok", (dialog, which) -> {
					for (VideoInfo x : getInfoInArrayList()) {
						new DownloadHistoryManager().removeInfoById(x.getId());
					}
					adapter.notifyDataSetChangedCustom(getInfoInArrayList());
				}).setNegativeButton("nope", null)
				.show();
		return super.onOptionsItemSelected(item);
	}
	
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		if (newConfig.orientation != configuration.orientation) {
			configuration.orientation = newConfig.orientation;
		}
		super.onConfigurationChanged(newConfig);
	}
	
	@Override
	protected void onResume() {
		super.onResume();
		isRunning = true;
		EventBus.getDefault().register(this);
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		isRunning = false;
		EventBus.getDefault().unregister(this);
	}
	
	@Subscribe(threadMode = ThreadMode.MAIN)
	public void onMessageEvent(IPC ignored) {
		if (isRunning) {
			recyclerView.post(() -> {
				recyclerView.setAdapter(adapter);
				adapter.notifyDataSetChangedCustom(getInfoInArrayList());
			});
		}
	}
}
