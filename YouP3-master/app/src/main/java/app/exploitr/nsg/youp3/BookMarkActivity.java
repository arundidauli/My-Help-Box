package app.exploitr.nsg.youp3;


import android.content.Context;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;
import android.os.VibrationEffect;
import android.os.Vibrator;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.content.ContextCompat;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.google.android.material.snackbar.Snackbar;

import java.util.ArrayList;
import java.util.List;

import Book.BookMark;
import Book.BookMarkAdapter;
import Book.BookMarkManager;
import Book.BookRealmController;
import Book.Launcher;
import Book.SimpleDivider;
import utils.DataStore;

public class BookMarkActivity extends AppCompatActivity {

    TextView noBook;
    RecyclerView books;
    BookMarkAdapter adapter;
    Handler handler;
    Runnable runnable;
    Snackbar bar;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_book_mark);

        books = findViewById(R.id.bookedItems);
        noBook = findViewById(R.id.noBookText);

        books.setLayoutManager(new LinearLayoutManager(BookMarkActivity.this));
        books.addItemDecoration(new SimpleDivider(BookMarkActivity.this));

        List<String> dex = getInfoInArrayList();
        adapter = new BookMarkAdapter(BookMarkActivity.this, dex);

        adapter.setClickListener(url -> {
            Launcher.i().setUrl(url);
            Launcher.i().setShouldLoad(true);
            finish();
        });

        adapter.setLongClickListener(id -> {
            Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                if (v != null) {
                    v.vibrate(VibrationEffect.createOneShot(500, VibrationEffect.DEFAULT_AMPLITUDE));
                }
            } else {
                if (v != null) {
                    v.vibrate(500);
                }
            }
            final String book = new BookMarkManager().getTitleById(id);
            new AlertDialog.Builder(BookMarkActivity.this)
                    .setTitle("Remove BookMark")
                    .setMessage("Remove " + book + "?")
                    .setNegativeButton("Nope", null)
                    .setPositiveButton("Ya", (dialog, which) -> {
                        new BookMarkManager().removeInfoById(id);
                        adapter.notifyDataSetChangedCustom(getInfoInArrayList());
                    }).show();
        });

        books.setAdapter(adapter);
        adapter.notifyDataSetChanged();

        handler = new Handler(Looper.getMainLooper());
        runnable = () -> {
            if (getSupportActionBar() != null) {
                getSupportActionBar().setTitle("BookMarks (" + new BookMarkManager().getTotalInfoCount() + ")");
            }

            if (new BookMarkManager().getTotalInfoCount() == 0) {
                books.setVisibility(View.GONE);
                noBook.setVisibility(View.VISIBLE);
            } else {
                books.setVisibility(View.VISIBLE);
                noBook.setVisibility(View.GONE);
            }
            handler.postDelayed(runnable, 100);
        };
        handler.post(runnable);

        if (DataStore.getInstance(getBaseContext()).isNewUserForBOOKMARK()) {
            bar = Snackbar.make(getWindow().getDecorView(), "Single Press To Open , Long Press To Remove", Snackbar.LENGTH_INDEFINITE)
                    .setActionTextColor(ContextCompat.getColor(getApplicationContext(), R.color.themeDef_dark))
                    .setAction("Understand", v -> bar.dismiss());
            bar.show();
            DataStore.getInstance(getBaseContext()).setNewUserNoMoreForBOOKMARK();
        }
    }

    private ArrayList<String> getInfoInArrayList() {
        ArrayList<String> all = new ArrayList<>();
        for (BookMark info : new BookRealmController().getBookMarks()) {
            all.add(info.getId() + "," + info.getTitle() + "," + info.getUrl() + "," + info.getFavicon());
        }
        return all;
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.clear_one,menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        new AlertDialog.Builder(BookMarkActivity.this)
                .setTitle("Check!")
                .setMessage("Are you sure to clear all downloads? It will also remove current downloads.")
                .setPositiveButton("Ok", (dialog, which) -> {
                    for (String x : getInfoInArrayList()) {
                        String[] y = x.split(",");
                        new BookMarkManager().removeInfoById(Integer.parseInt(y[0]));
                    }
                    adapter.notifyDataSetChangedCustom(getInfoInArrayList());
                }).setNegativeButton("nope", null)
                .show();
        return super.onOptionsItemSelected(item);
    }

    @Override
    protected void onDestroy() {
        handler.removeCallbacks(runnable);
        super.onDestroy();
    }

}
